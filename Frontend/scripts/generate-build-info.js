#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function readEnv(name) {
  const value = process.env[name];
  return value && value.trim() ? value.trim() : undefined;
}

function tryGitCommand(args, options) {
  try {
    return execSync(`git ${args}`, { encoding: 'utf8', stdio: ['ignore', 'pipe', 'ignore'], ...options }).trim();
  } catch (error) {
    return undefined;
  }
}

function getGitInfoForPath(targetPath, repoRoot) {
  const options = repoRoot ? { cwd: repoRoot } : undefined;
  const commit = tryGitCommand(`log -1 --format=%H -- ${targetPath}`, options);
  const timestamp = tryGitCommand(`log -1 --format=%cI -- ${targetPath}`, options);
  return { commit, timestamp };
}

function selectValue(primary, fallback, defaultValue) {
  return primary ?? fallback ?? defaultValue;
}

function buildInfo() {
  const scriptDir = __dirname;
  const frontendRoot = path.resolve(scriptDir, '..');
  const repoRoot = tryDetermineRepoRoot(frontendRoot);

  const frontendGit = repoRoot ? getGitInfoForPath('Frontend', repoRoot) : { commit: undefined, timestamp: undefined };
  const backendGit = repoRoot ? getGitInfoForPath('Backend', repoRoot) : { commit: undefined, timestamp: undefined };

  const frontendTimestamp = selectValue(
    readEnv('FRONTEND_BUILD_TIME'),
    frontendGit.timestamp,
    new Date().toISOString()
  );

  const backendTimestamp = selectValue(
    readEnv('BACKEND_BUILD_TIME'),
    backendGit.timestamp,
    undefined
  );

  const info = {
    generatedAt: new Date().toISOString(),
    frontend: {
      buildTimestamp: frontendTimestamp,
      commit: selectValue(readEnv('FRONTEND_COMMIT'), frontendGit.commit, undefined)
    },
    backend: {
      buildTimestamp: backendTimestamp,
      commit: selectValue(readEnv('BACKEND_COMMIT'), backendGit.commit, undefined)
    }
  };

  const outputPath = path.resolve(frontendRoot, 'src', 'app', 'build-info.generated.ts');
  const fileContent = `// This file is auto-generated by scripts/generate-build-info.js\n` +
    `// Do not edit manually.\n` +
    `export interface BuildInfoMeta {\n` +
    `  generatedAt: string;\n` +
    `  frontend: BuildInfoEntry;\n` +
    `  backend: BuildInfoEntry;\n` +
    `}\n` +
    `export interface BuildInfoEntry {\n` +
    `  buildTimestamp?: string;\n` +
    `  commit?: string;\n` +
    `}\n` +
    `export const BUILD_INFO: BuildInfoMeta = ${JSON.stringify(info, null, 2)};\n`;

  fs.writeFileSync(outputPath, fileContent);
}

function tryDetermineRepoRoot(frontendRoot) {
  let current = frontendRoot;
  for (let i = 0; i < 5; i++) {
    const potentialGit = path.join(current, '.git');
    if (fs.existsSync(potentialGit)) {
      return current;
    }
    const parent = path.dirname(current);
    if (parent === current) {
      break;
    }
    current = parent;
  }
  return undefined;
}

buildInfo();
